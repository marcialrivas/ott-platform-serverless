name: Build
on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  moviesBuild:
    name: Movies Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Python unit test
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: Install dependencies
        run: |
            pip install coverage
      - name: Run test with coverage
        run: |
            cd front-end-microservices/movies
            coverage run --omit=lambda_get_movie.py,test/* -m unittest discover -p "*_test.py"
            coverage xml -o ../../coverage-reports/movies-coverage-.xml --skip-empty
            sed -i 's/\/home\/runner\/work\/ott-platform-serverless\/ott-platform-serverless\//\/github\/workspace\//g' ../../coverage-reports/movies-coverage-.xml
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        with:
            args: >
                -Dsonar.python.coverage.reportPaths=coverage-reports/movies-coverage-.xml
                -Dsonar.exclusions=front-end-microservices/movies/test/**,front-end-microservices/movies/lambda*
                -Dsonar.sources=front-end-microservices/movies
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  movies_deploy_stage:
    name: Movies Deploy Staging
    runs-on: ubuntu-latest
    needs: moviesBuild
    strategy:
      matrix:
        node-version: [14.x]
    steps:
      - uses: actions/checkout@v2
      - name: serverless deploy stage
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - run: |
            npm install -g serverless
      - name: serverless deploy
        uses: serverless/github-action@master
        with:
          args: -c "serverless deploy --config ./front-end-microservices/movies/serverless.yml"
          entrypoint: /bin/bash
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SLS_DEBUG: 1

